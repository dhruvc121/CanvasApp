{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","canvasRef","useRef","contextRef","useState","drag","setDrag","x","y","dragStart","setDragStart","snapshot","setSnapshot","radioValue","setRadioValue","useEffect","setCanvas","canvas","current","height","window","innerHeight","width","innerWidth","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","takeSnapshot","document","getElementById","getImageData","drawShape","position","lineTo","stroke","drawFree","beginPath","moveTo","drawLine","radius","Math","sqrt","pow","arc","PI","drawCircle","rect","drawRectangle","className","id","onMouseDown","nativeEvent","offsetX","offsetY","onMouseUp","closePath","onMouseMove","putImageData","on","ref","Button","onClick","ButtonGroup","name","value","map","radio","idx","ToggleButton","type","variant","checked","onChange","e","currentTarget","alert","image","toDataURL","replace","location","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ddf76919.chunk.js","sourcesContent":["import React,{useRef,useState,useEffect} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button,ButtonGroup,ToggleButton} from 'react-bootstrap';\nimport './App.css'\n\n\nfunction App() {\n  const canvasRef=useRef(null)\n  const contextRef=useRef(null)\n  const [drag,setDrag]=useState(false)\t\t\t\t//reponsible to handle mouseup/down event\n  const [dragStart,setDragStart]=useState({x:0,y:0})//store start position of drag event\n  const [snapshot,setSnapshot]=useState()\t\t\t//stores the canvas data\n  const [checked, setChecked] = useState(false);\t\n  const [radioValue, setRadioValue] = useState('1');\n\n  const radios = [\n    { name: 'Free', value: '1' },\n    { name: 'Line', value: '2' },\n    { name: 'Circle', value: '3' },\n    { name: 'Rectangle', value: '4' },\n  ]; \n \n//to load canvas on initailization\n  useEffect(()=>{\n\t\tsetCanvas()\n\t  },[])\n\t  \n//function to set/initailize empty canvas\t  \n  const setCanvas=()=>{\n\t  //setting canvas \n\t\tconst canvas=canvasRef.current;\n\t\tcanvas.height=window.innerHeight * 2;\n\t\tcanvas.width=window.innerWidth * 2;\n\t\tcanvas.style.height=`${window.innerHeight}px`;\n\t\tcanvas.style.width=`${window.innerWidth}px`;\n\t\t\n\t  //setting context\t\n\t\tconst context=canvas.getContext(\"2d\")\n\t\tcontext.scale(2,2)\n\t\tcontext.lineCap=\"round\"\n\t\tcontext.strokeStyle=\"black\"\n\t\tcontext.lineWidth=5\n\t\tcontextRef.current=context;\n\t  }\n\t  \n//function to start draw. invoked on mouseDown event\n  const startToDraw=({nativeEvent})=>{\n\t\t\tconst {offsetX,offsetY}=nativeEvent;\n\t\t\tsetDrag(true)\n\t\t\tsetDragStart({x:offsetX,y:offsetY})\n\t\t\ttakeSnapshot()\n\t  }\n\n//function to store the canvas. Used to store start value(coordinates) for shapes\n  const takeSnapshot=()=>{\n\t\t\tconst canvas=document.getElementById(\"canvas\")\n\t\t\tconst snapshot=contextRef.current.getImageData(0,0,canvas.width,canvas.height)\n\t\t\tsetSnapshot(snapshot)\n\t  }\n\n//function to restore canvas.\n  const restoreSnapshot=()=>{\n\t\t\tcontextRef.current.putImageData(snapshot,0,0)\n\t  }\n\t  \n//function to handle free hand drwaing\n  const drawFree=(position)=>{\n\t\t\tcontextRef.current.lineTo(position.x,position.y)\n\t\t\tcontextRef.current.stroke()\n\t  }\n\n//function to handle drawing lines\n  const drawLine=(position)=>{\n\t\t\tcontextRef.current.beginPath();\n\t\t\tcontextRef.current.moveTo(dragStart.x,dragStart.y)\n\t\t\tcontextRef.current.lineTo(position.x,position.y)\n\t\t\tcontextRef.current.stroke()\n\t  }\n\t  \n//function to handle drawing circle\n  const drawCircle=(position)=>{\n\t\t\tlet radius = Math.sqrt(Math.pow((dragStart.x-position.x),2)+Math.pow((dragStart.y-position.y),2))\n\t\t\tcontextRef.current.beginPath()\n\t\t\tcontextRef.current.arc(dragStart.x,dragStart.y,radius,0,2*Math.PI,false)\n\t\t\tcontextRef.current.stroke()\n\t  }\n\n//function to handle drawing rectangles\n  const drawRectangle=(position,)=>{\n\t\t\tcontextRef.current.beginPath()\n\t\t\tlet width=position.x-dragStart.x\n\t\t\tlet height=position.y-dragStart.y\n\t\t\tcontextRef.current.rect(dragStart.x,dragStart.y,width,height)\n\t\t\tcontextRef.current.stroke()\n\t  }\n\n//function to call respective shape drawing functions\n  const drawShape=(position,radioValue)=>{\n\t\t\t\tif(radioValue==='1'){\n\t\t\t\t\tdrawFree(position);\n\t\t\t\t}else if(radioValue==='2'){\n\t\t\t\t\tdrawLine(position)\n\t\t\t\t\t}else if(radioValue==='3'){\n\t\t\t\t\t\tdrawCircle(position)\n\t\t\t\t\t\t}else if(radioValue==='4'){\n\t\t\t\t\t\t\tdrawRectangle(position)\n\t\t\t\t\t\t\t}\n\t}\n\n//function to continue to draw. invoked on mouse move event.\n  const draw=({nativeEvent})=>{\n\t\t\tconst {offsetX,offsetY}=nativeEvent;\n\t\t\tif(drag){\n\t\t\t\t\trestoreSnapshot()\n\t\t\t\t\tlet position={x:offsetX,y:offsetY}\n\t\t\t\t\tdrawShape(position,radioValue)\n\t\t\t\t}\n\t  }\n\n//function to stop draw. invoked on mouse up event.\n  const stopDraw=()=>{\n\t\t\tcontextRef.current.closePath()\n\t\t\tsetDrag(false)\n\t  }\n\n//function to reset canvas\n  const reset=()=>{\n\t\tsetCanvas()\n\t  }\n\t  \n//function to save the canvas as high-resolution png file.  \n  const save=()=>{\n\t    window.alert(\"Image will be downloaded shortly.\")\n\t\tconst canvas=document.getElementById(\"canvas\")\n\t\tconst image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n\t\twindow.location.href=image;\n\t  }\n  return (\n    <>\n    <center><h1>Canvas App</h1></center>\n    <div className=\"canvas\">\n\t<canvas id=\"canvas\"\n\tonMouseDown={startToDraw}\n\tonMouseUp={stopDraw}\n\tonMouseMove={draw}\n\ton\n\tref={canvasRef}\n\t/>\n\t</div>\n\t<div className=\"menu\">\n\t<Button className=\"float-left\" onClick={reset}>Reset</Button>\n\t <ButtonGroup>\n        {radios.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            id={`radio-${idx}`}\n            type=\"radio\"\n            variant=\"primary\"\n            name=\"radio\"\n            value={radio.value}\n            checked={radioValue === radio.value}\n            onChange={(e) => setRadioValue(e.currentTarget.value)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n      </ButtonGroup>\n      <Button className=\"float-right\" onClick={save}>Save</Button>\n\t</div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}